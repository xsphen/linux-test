Chapter 15, Interprocess Communication

<1> Pipes
-Oldest form of UNIX IPC
-Two limitations
(1)half duplex(半双工), data flows in only one direction.(Some systems provide full-duplex pipes)
(2)Pipes can be used only between processes that have a common ancestor. Normally, a pipe is created by a process, that process calls "fork", and the pipe is used between the parent and child.
-'FIFOs' get around(避免) the (2) limitation, and 'sockets' get around (1) and (2)
-int pipe(int fd[2]), return 0 if OK, -1 on error, #include <unistd.h>
(1)fd[0] is open for reading, f[1] is open for writing.
-Normally, the process that calls 'pipe' then calls 'fork', creating an IPC channel from the parent to the child, or vice versa.
(2)What happens after the 'fork' depends on which direction of data flow we want, so we can choose which one close fd[0] or close fd[1]
(3)If we 'read' from a pipe whose 'write' end has been closed, 'read' return 0 to indicate an end of file after all the data has been read. If we 'write' to a pipe whose 'read' end has been closed, the signal SIGPIPE is generated, if we ignore the signal or catch it and return from the signal handler, 'write' return -1 with errno set to EPIPE

<2> popen & pclose
-these two functions handle the work: creating a pipe, forking a child, closing the unused ends of the pipe, executing a shell to run the command, and waiting for the command to terminate.
-FILE *popen(const char *cmdstring, const char *type); (type is 'r' or 'w')
 return file pointer if ok, else return NULL
 int pclose(FILE *fp);
 return termination status of cmdstring, or -1 on error
 #include <stdio.h>
-Each time 'popen' is called, we have to remember the process ID of the child that we create and either its file descriptor or FILE pointer.
-When 'pclose' is called with FILE pointer as its argument, we call the standard I/O function 'fileno' to get the file descriptor and then have the child process ID for the call to 'waitpid' ( pclose(FILE *fp) -> fd = fileno(fp) -> waitpid(childpid[fd] )

