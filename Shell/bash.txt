				什么是shell和bash
用户通过shell操作应用程序，让应用程序来指挥内核，从而内核完成我们所需要的硬件服务。
用户->用户界面(shell,KDE,application)->内核(kernal)->硬件
用户<-用户界面<-内核<-硬件
在/etc/shells文件里记录了我们可以使用的shell，而bash(Bource Again Shell)是Linux默认的shell
可以通过type command来查询command是否是bash的内置命令，可以无参，也可有有-t(列出执行依据)和-a

				shell的变量功能
变量的规则，显示和设置
	shell变量只能以英文字母和数字组成，且不能以数字开头
	变量赋值不能有空格，即var=shell，而var = shell是错的
	单引号和双引号的区别:echo "$var" (结果是shell) echo '$var' (结果是$var)
	变量支持转义字符\
	系统默认的变量通常是大写的
	unset可以取消变量，如unset var
	在一般状态下，父进程的自定义变量在子进程内无法使用，除非用export将变量设置为环境变量
	
环境变量的功能
	env :environment的缩写，列举出所有环境变量
		常见的环境变量有：
		HOME：代表用户的主文件夹，例如cd $HOME可以快速回到主文件夹目录
		SHELL：显示当前环境使用的shell是哪个程序
		HISTSIZE：显示历史命令记录的条数
		LANG：语系数据
		RANDOM：产生一个随机数
		MAIL,PATH等
	set :查看所有变量，包括用户自定义变量
		$：代表目前shell的线程代号，即所谓的PID(Process ID),只要echo $$就可以知道当前的PID
		?：代表上一次执行命令所回传的值，如果成功执行，返回的是0，否则返回一个非0值
		OYTYPE,HOSTTYPE,MACHTYPE：与主机硬件与内核的等级有关
	export :自定义变量转换成环境变量。用法是export $var，如果不接变量名，则显示所有环境变量

影响显示结果的语系变量(locale)
	locale :列出所有有关语系的变量，但通常更改LANG或者LC_ALL就可以同时改变其他相关变量了。详细内容可以man一下。乱码问题一般都是通过语系更改来解决的。

变量的有效范围
	环境变量相当与全局变量，自定义变量相当与局部变量
	当启动一个shell时，操作系统会分配一个记忆块给shell用，环境变量便是存在此处。

变量键盘读取，数组与声明
	read :读取来自键盘输入的变量 -p可以接提示符 -t可以接等待的秒数
	declare/typeset :声明变量的类型，如果不接参数，则跟set一样
		-a :将variable声明为数组
		-i :将variable声明为整型
		-x :将variable声明为环境变量
		-r ;将variable声明为readonly只读类型
	数组声明为var[index]=content，只支持一维数组
	
与文件系统及程序的限制关系：ulimit
	由于Linux是多用户同时工作的系统，如果用户不限制地使用系统资源，后果便是系统挂了。bash提供限制用户的某些系统资源的功能，包括可以打开的文件数量，可以使用的CPU时间，可以使用的内存总量等。即：
	ulimit [-SHacdfltu] [配额]
	-H :hard limit,严格的设置，必定不能超过这个设置的数值
	-S :soft limit,警告的设置，一旦超过这个值，系统会发出警告。通常这个值比hard limit小
	-a :后面不接参数，可列出所有的限制额度
	-c :当某些进程发生错误时，系统可能会将该进程在内存中的信息写成文件(拍错用)，这种文件称为内核文件(core file),此为限制每个内核文件的最大容量
	-f :设置此shell可以创建的最大文件容量，单位为KB
	-d :进程可使用的最大断裂内存容量
	-l :可用于锁定的内存量
	-t :可使用的最大CPU时间，单位秒
	-u :单一用户可以使用的最大进程数量
	注意，一般身份用户如果以ulimit设置了-f的文件大小，那么她只能继续减小文件容量，而不能增大。

变量内容的删除，替代与替换
	删除和替代
	${variable#keyWord}:从变量内容从头开始删除，直到匹配到第一个keyWord.
	${variable##keyWorld}:从变量内容从头开始删除，直到匹配到最后一个keyWord.
	${variable%keyWord}:从变量内容从尾开始删除，直到匹配到第一个keyWord.
	${variable%%keyWord}:从变量内容从尾开始删除，直到匹配到最后一个keyWord.
	${variable/oldWord/newWord}:将变量的第一个oldWord替换成newWord.
	${variable//oldWord/newWord}:将变量内容的素有oldWord替换成newWord.
	举例，假设variable="/Hello World/"
	若输入echo ${variable#*l},*为通配符，则输出为lo World/
	若输入echo ${variable##*l},则输出d/
	同理，将#和##分别改成%和%%(注意通配符的位置改变，应该是从后匹配到前)则输出为/Hello Wor和/He

	变量的测试与内容替换
	举例new_var=${old_var-content}，有三种情况，如果old_var没有设置，则new_var=content,如果old_var为空串或者非空串，new_var=old_var。
	还有许多例子，有-,:-,+,:+,=,:=,?,:?，详情查阅鸟哥私房菜基础篇P316。

				命令别名与历史命令
命令别名设置：alias, unalias
	别名命令例子：alias vim="v"
	取消别名：unalias v
	alias不接参数：列出所有别名
	PS：clear清屏，dir列出目录与文件

历史命令：history
	history：列出历史命令
	-n：n是数字，列出最近的n条命令
	-c：将目前shell中的所有history内容全部清除
	-a：将目前新增的history命令加入到hisfiles中，默认写入~/.bash_history
	-r：将histfiles的内容读到当前shell的history记忆中
	-w：将目前的history记忆写入到histfiles中

	!n：n是数字，执行第n条命令
	!command：执行最近的匹配command的命令
	!!：执行上一条命令，相当与方向键上+enter
	histfiles的记录数量取决与HISTSIZE,注销shell时，系统会将最近的history写入到.bash_history中。-w是强制写入。注意多用户使用时，.bash_history内容会被最后注销的用户的history记忆覆盖。
